<!-- Section File Name: Kilowatts-Amps.liquid -->
<!-- Section Name: Kilowatts-to-Amps -->
<!-- Presets Name: kiloWatt-converter -->

<style>
  #sid-{{section.id}} .main_container{
    width: 100%;
    position: relative;
    background-color: {{section.settings.bg_color}};
  }
  #sid-{{section.id}} .content_wrapper{
    {% if section.settings.full_width == false %}
      max-width: {{section.settings.maxWidth}}px;
    {% endif %}
    width: 100%;
    margin: 0 auto;
    padding: {{ section.settings.padding_top }}px {{ section.settings.padding_right }}px {{ section.settings.padding_bottom }}px {{ section.settings.padding_left }}px;
  }
  #sid-{{section.id}} {

  }

  @media only screen and (max-width: 767px){
    #sid-{{section.id}} .content_wrapper{
      padding: {{ section.settings.padding_top_mb }}px {{ section.settings.padding_right_mb }}px {{ section.settings.padding_bottom_mb }}px {{ section.settings.padding_left_mb }}px;
    }
    #sid-{{section.id}} .main_container{

    }
  }
  .calculatorCont {
    position: relative;
    background-color: {{ section.settings.bg-color }};
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    font-family: monospace;
  }

  .calculatorCont>h1 {
    font-size: 60px;
    font-weight: 900;
    transform: rotate(12deg);
    color: black;
    text-shadow: 2px 2px 20px black;
    text-transform: uppercase;
  }

  .calculator {
    position: absolute;
    width: 50%;
    max-width: 465px;
    border-radius: 10px;
    padding: 20px;
    background: {{ section.settings.calc-bg-color }}{{ section.settings.bg_opacity }};
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur({{ section.settings.bg_blur }}px);
    -webkit-backdrop-filter: blur({{ section.settings.bg_blur }}px);
    border: 1px solid rgba(204, 204, 204, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    gap: 20px;
  }

  .calculatorHead {
    font-size: 30px;
    font-weight: 700;
    font-family: system-ui;
  }

  .dataInp,
  .dataRes {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 90%;
    gap: 5px;
    font-size: 18px;
    font-weight: 900;
  }

  .resultCont {
    padding: 0px 10px;
  }

  input.input:focus-visible {
    box-shadow: none;
    border: none;
    outline: none;
  }

  .resultCont {
    display: block !important;
    border: none;
    background-color: #ffffff;
    border: 1px solid blue;
    border-radius: 4px;
    transition: 1s;
    width: max-content;
    min-height: 20px;
  }

  .group {
    position: relative;
  }

  .input {
    font-size: 16px;
    padding: 10px 10px 10px 5px;
    display: block;
    width: 200px;
    border: none;
    border-bottom: 1px solid #515151;
    background: #ffffff6b;
  }

  .input:focus {
    outline: none;
  }

  .parentLabel {
    position: unset !important;
    font-weight: 900;
  }

  label {
    color: #000;
    font-size: 18px;
    font-weight: normal;
    position: absolute;
    pointer-events: none;
    left: 5px;
    top: 5px;
    transition: 0.2s ease all;
    -moz-transition: 0.2s ease all;
    -webkit-transition: 0.2s ease all;
  }

  .input:focus~label,
  .input:valid~label {
    left: 80%;
    font-size: 14px;
    color: #000;
  }

  .bar {
    position: relative;
    display: block;
    width: 200px;
  }

  .bar:before,
  .bar:after {
    content: '';
    height: 2px;
    width: 0;
    bottom: 1px;
    position: absolute;
    background: #5264AE;
    transition: 0.2s ease all;
    -moz-transition: 0.2s ease all;
    -webkit-transition: 0.2s ease all;
  }

  .bar:before {
    left: 50%;
  }

  .bar:after {
    right: 50%;
  }

  .input:focus~.bar:before,
  .input:focus~.bar:after {
    width: 50%;
  }

  .highlight {
    position: absolute;
    height: 60%;
    width: 100px;
    top: 25%;
    left: 0;
    pointer-events: none;
    opacity: 0.5;
  }

  .input:focus~.highlight {
    animation: inputHighlighter 0.3s ease;
  }

  @keyframes inputHighlighter {
    from {
      background: #5264AE;
    }

    to {
      width: 0;
      background: transparent;
    }
  }

  .Links {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .Menu {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
  }

  .Menu-link>a {
    color: black;
    text-decoration: none;
  }

  .inpWrapper {
    display: flex;
  }

  .inpWrapper>select {
    border: none;
    outline: none;
    box-shadow: none;
    border-left: 1px solid #515151;
    border-bottom: 1px solid #515151;
    background-color: #ffffff6b;
    padding: 3px;
  }

  select#typeSelector {
    width: 63%;
    height: 40px;
    border: none;
    outline: none;
    box-shadow: none;
    border-bottom: 1px solid #515151;
    background-color: #ffffff6b;
  }

  select#VoltTypeSelector {
    width: 63%;
    height: 40px;
    border: none;
    outline: none;
    box-shadow: none;
    border-bottom: 1px solid #515151;
    background-color: #ffffff6b;
  }

  option {
    background-color: #ccc;
    font-weight: 600;
    color: black;
  }

  #voltSelectorCont {
    display: none;
  }

  #powerSelectorCont {
    display: none;
  }

  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
</style>
<div id="sid-{{ section.id }}">
  <div class="main_container">
    <div class="content_wrapper">
      <div class="Links">
        <div class="Menu">
          {% for link in section.settings.menuNav.links %}
          <div class="Menu-link">
            <a href="{{ link.url }}">{{ link.title }}</a>
          </div>
          {% endfor %}
        </div>
      </div>
      <div class="calculatorCont">
    <h1>Kilowatts to Amps Calculator</h1>
    <div class="calculator">
      <span class="calculatorHead">{{ section.settings.Calculator-title }}</span>
      <div class="dataInp">
        <label class="parentLabel" for="valueInp">
          Current type
        </label>
        <select name="" id="typeSelector">
          <option value="dc">DC</option>
          <option value="ac_1">AC - Single phase</option>
          <option value="ac_3">AC - Three phase</option>
        </select>
      </div>
      <div class="dataInp">
        <label class="parentLabel" for="valueInp">
          Power (KW)
        </label>
        <div class="inpWrapper">
          <div class="group">
            <input required="" type="number" min="1" id="wattInp" class="input">
            <span class="highlight"></span>
            <span class="bar"></span>
            <label>WATTs</label>
          </div>
          <select name="" id="wattSelect">
            <option value="milliWatts">mW</option>
            <option value="watts">W</option>
            <option value="kiloWatts" selected>kW</option>
          </select>
        </div>
      </div>
      <div id="voltSelectorCont" class="dataInp">
        <label class="parentLabel" for="valueInp">
          Voltage type
        </label>
        <select name="" id="VoltTypeSelector">
          <option value="ltl_v">Line to line voltage</option>
          <option value="ltn_v">Line to neutral voltage</option>
        </select>
      </div>
      <div class="dataInp">
        <label class="parentLabel" for="valueInp">
          Voltage (volts)
        </label>
        <div class="inpWrapper">
          <div class="group">
            <input required="" type="number" min="1" id="voltInp" class="input">
            <span class="highlight"></span>
            <span class="bar"></span>
            <label>VOLTs</label>
          </div>
          <select name="" id="voltSelector">
            <option value="millivolt">mV</option>
            <option value="volt" selected>V</option>
            <option value="kilovolt">kV</option>
          </select>
        </div>
      </div>
      <div id="powerSelectorCont" class="dataInp">
        <label class="parentLabel" for="valueInp">
          Power factor (â‰¤1)
        </label>
        <div class="group">
          <input required="" type="number" min="0" max="1" id="powerInp" class="input">
          <span class="highlight"></span>
          <span class="bar"></span>
          <label></label>
        </div>
      </div>
      <div class="Calculator-Btn">
        <button class="button btn" id="calculateBtn">Calculate</button>
        <button class="button btn" id="resetBtn">Reset</button>
        <a href="https://aleena-practice.myshopify.com/pages/amps-to-kilowatts-calculator"><button class="button btn" id="SwapBtn">Swap</button></a>
      </div>
      <div class="dataRes">
        <span>
          Current (amps)
        </span>
        <div class="resultCont" id="normalResCont">
          <b></b>
          <span>A</span>
        </div>
      </div>
      <div class="dataRes">
        <span>
          Current (milliamps)
        </span>
        <div class="resultCont" id="milliResCont">
          <b></b>
          <span>mA</span>
        </div>
      </div>
    </div>
  </div>
    </div>
  </div>
</div>
    <script>
    const wattEntered = wattInp
    const voltEntered = voltInp
    const typeSelect = typeSelector
    const voltTypeSelect = voltSelectorCont
    const voltTypeSelectorDrop = VoltTypeSelector
    const powerInp = powerSelectorCont
    const wattValue = wattSelect
    const voltValue = voltSelector
    const powerValue = document.getElementById('powerInp')
    const calculateBtn = document.getElementById('calculateBtn')
    const resetBtn = document.getElementById('resetBtn')
    const mResDiv = document.querySelector('#milliResCont b')
    const nResDiv = document.querySelector('#normalResCont b')

    typeSelect.addEventListener('change', () => {
      if (typeSelect.value == 'ac_1') {
        powerInp.style.display = "flex"
        voltTypeSelect.style.display = "none"
      }
      else if (typeSelect.value == 'ac_3') {
        powerInp.style.display = "flex"
        voltTypeSelect.style.display = "flex"
      }
      else {
        powerInp.style.display = "none"
        voltTypeSelect.style.display = "none"
      }
    })

    resetBtn.addEventListener('click', () => {
      nResDiv.innerText = ''
      mResDiv.innerText = ''
      wattEntered.value = ''
      voltEntered.value = ''
      typeSelect.value = 'dc'
      powerInp.style.display = 'none'
      voltTypeSelect.style.display = 'none'

    })

    function dcFunc(i, v) {
      if (wattValue.value == "milliWatts" && voltValue.value == "millivolt" || wattValue.value == "watts" && voltValue.value == "volt" || wattValue.value == "kiloWatts" && voltValue.value == "kilovolt") {

        const results = {
          normalRes: i / v,
          milliRes: i / v * 1000
        }

        return results
      }
      if (wattValue.value == "watts" && voltValue.value == "millivolt" || wattValue.value == "kiloWatts" && voltValue.value == "volt") {
        const results = {
          normalRes: i / v * 1000,
          milliRes: 1000 * i / v * 1000
        }
        return results
      }
      if (wattValue.value == "milliWatts" && voltValue.value == "volt" || wattValue.value == "watts" && voltValue.value == "kilovolt") {
        const results = {
          normalRes: i / v / 1000,
          milliRes: i / v
        }
        return results
      }
      if (wattValue.value == "kiloWatts" && voltValue.value == "millivolt") {
        const results = {
          normalRes: (i / v * 1000) * 1000,
          milliRes: ((i / v * 1000) * 1000) * 1000
        }
        return results
      }
      if (wattValue.value == "milliWatts" && voltValue.value == "kilovolt") {
        const results = {
          normalRes: ((i / v / 1000) / 1000).toFixed(7),
          milliRes: ((i / v / 1000))
        }
        return results
      }
    }

    function acSingle(i, v, p) {
      if (p >= 0 || p <= 1) {
        if (wattValue.value == "milliWatts" && voltValue.value == "millivolt" || wattValue.value == "watts" && voltValue.value == "volt" || wattValue.value == "kiloWatts" && voltValue.value == "kilovolt") {

          const results = {
            normalRes: i / (p * v),
            milliRes: i / (p * v) * 1000
          }

          return results
        }
        if (wattValue.value == "watts" && voltValue.value == "millivolt" || wattValue.value == "kiloWatts" && voltValue.value == "volt") {
          const results = {
            normalRes: i / (p * v) * 1000,
            milliRes: 1000 * i / (p * v) * 1000
          }
          return results
        }
        if (wattValue.value == "milliWatts" && voltValue.value == "volt" || wattValue.value == "watts" && voltValue.value == "kilovolt") {
          const results = {
            normalRes: i / (p * v) / 1000,
            milliRes: i / (p * v)
          }
          return results
        }
        if (wattValue.value == "kiloWatts" && voltValue.value == "millivolt") {
          const results = {
            normalRes: (i / (p * v) * 1000) * 1000,
            milliRes: ((i / (p * v) * 1000) * 1000) * 1000
          }
          return results
        }
        if (wattValue.value == "milliWatts" && voltValue.value == "kilovolt") {
          const results = {
            normalRes: ((i / (p * v) / 1000) / 1000).toFixed(7),
            milliRes: ((i / (p * v) / 1000))
          }
          return results
        }
      }
      else {
        alert('Please enter power factor from 0 to 1')
        powerValue.value = 1
      }
    }

    function acTriple(i, v, p) {
      const ltl_sq = Math.sqrt(3)
      const ltn_sq = 3
      if (p >= 0 || p <= 1) {
        if (voltTypeSelectorDrop.value == 'ltl_v') {
          if (wattValue.value == "milliWatts" && voltValue.value == "millivolt" || wattValue.value == "watts" && voltValue.value == "volt" || wattValue.value == "kiloWatts" && voltValue.value == "kilovolt") {

            const results = {
              normalRes: (i / (ltl_sq * p * v)).toFixed(10),
              milliRes: (i / (ltl_sq * p * v) * 1000).toFixed(10)
            }

            return results
          }
          if (wattValue.value == "watts" && voltValue.value == "millivolt" || wattValue.value == "kiloWatts" && voltValue.value == "volt") {
            const results = {
              normalRes: (i / (ltl_sq * p * v) * 1000).toFixed(10),
              milliRes: (1000 * i / (ltl_sq * p * v) * 1000).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "milliWatts" && voltValue.value == "volt" || wattValue.value == "watts" && voltValue.value == "kilovolt") {
            const results = {
              normalRes: (i / (ltl_sq * p * v) / 1000).toFixed(10),
              milliRes: (i / (ltl_sq * p * v)).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "kiloWatts" && voltValue.value == "millivolt") {
            const results = {
              normalRes: ((i / (ltl_sq * p * v) * 1000) * 1000).toFixed(10),
              milliRes: (((i / (ltl_sq * p * v) * 1000) * 1000) * 1000).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "milliWatts" && voltValue.value == "kilovolt") {
            const results = {
              normalRes: ((i / (ltl_sq * p * v) / 1000) / 1000).toFixed(10),
              milliRes: ((i / (ltl_sq * p * v) / 1000)).toFixed(10)
            }
            return results
          }
        }
        if (voltTypeSelectorDrop.value == 'ltn_v') {
          if (wattValue.value == "milliWatts" && voltValue.value == "millivolt" || wattValue.value == "watts" && voltValue.value == "volt" || wattValue.value == "kiloWatts" && voltValue.value == "kilovolt") {

            const results = {
              normalRes: (i / (ltn_sq * p * v)).toFixed(10),
              milliRes: (i / (ltn_sq * p * v) * 1000).toFixed(10)
            }

            return results
          }
          if (wattValue.value == "watts" && voltValue.value == "millivolt" || wattValue.value == "kiloWatts" && voltValue.value == "volt") {
            const results = {
              normalRes: (i / (ltn_sq * p * v) * 1000).toFixed(10),
              milliRes: (1000 * i / (ltn_sq * p * v) * 1000).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "milliWatts" && voltValue.value == "volt" || wattValue.value == "watts" && voltValue.value == "kilovolt") {
            const results = {
              normalRes: (i / (ltn_sq * p * v) / 1000).toFixed(10),
              milliRes: (i / (ltn_sq * p * v)).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "kiloWatts" && voltValue.value == "millivolt") {
            const results = {
              normalRes: ((i / (ltn_sq * p * v) * 1000) * 1000).toFixed(10),
              milliRes: (((i / (ltn_sq * p * v) * 1000) * 1000) * 1000).toFixed(10)
            }
            return results
          }
          if (wattValue.value == "milliWatts" && voltValue.value == "kilovolt") {
            const results = {
              normalRes: ((i / (ltn_sq * p * v) / 1000) / 1000).toFixed(10),
              milliRes: ((i / (ltn_sq * p * v) / 1000)).toFixed(10)
            }
            return results
          }
        }
      }
      else {
        alert('Please enter power factor from 0 to 1')
        powerValue.value = 1
      }
    }

    calculateBtn.addEventListener('click', () => {
      if (typeSelect.value == 'dc') {
        const result = dcFunc(wattEntered.value, voltEntered.value)
        console.log(result);
        nResDiv.innerText = result.normalRes < 1 ? result.normalRes : (result.normalRes).toLocaleString()
        mResDiv.innerText = result.milliRes < 1 ? result.milliRes : (result.milliRes).toLocaleString()
      }
      else if (typeSelect.value == 'ac_1') {
        const result = acSingle(wattEntered.value, voltEntered.value, powerValue.value)
        nResDiv.innerText = result.normalRes < 1 ? result.normalRes : (result.normalRes).toLocaleString()
        mResDiv.innerText = result.milliRes < 1 ? result.milliRes : (result.milliRes).toLocaleString()
      }
      else if (typeSelect.value == 'ac_3') {
        const result = acTriple(wattEntered.value, voltEntered.value, powerValue.value)
        nResDiv.innerText = result.normalRes < 1 ? result.normalRes : (result.normalRes).toLocaleString()
        mResDiv.innerText = result.milliRes < 1 ? result.milliRes : (result.milliRes).toLocaleString()

      }
    })
  </script>
{% schema %}
  {
    "name": "Kilowatts-to-Amps",
    "settings": [
      {
        "type": "header",
        "content": "Section Settings"
      },
      {
        "type": "header",
        "content": "Desktop Padding"
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Top",
        "default": 40
      },
      {
        "type": "range",
        "id": "padding_right",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Right",
        "default": 40
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Bottom",
        "default": 40
      },
      {
        "type": "range",
        "id": "padding_left",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Left",
        "default": 40
      },
      {
        "type": "header",
        "content": "Mobile Padding"
      },
      {
        "type": "range",
        "id": "padding_top_mb",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Top",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_right_mb",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Right",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_bottom_mb",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Bottom",
        "default": 20
      },
      {
        "type": "range",
        "id": "padding_left_mb",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "label": "Padding Left",
        "default": 20
      },
      {
        "type": "checkbox",
        "id": "full_width",
        "label": "Page Full Width",
        "default": false
      },
      {
        "type": "number",
        "id": "maxWidth",
        "label": "Page Width",
        "default": 1440
      },
      {
        "type": "color",
        "id": "bg_color",
        "label": "Background Color",
        "default": "transparent"
      },
      {
        "type": "header",
        "content": "Navigation Links Settings"
      },
      {
        "type": "link_list",
        "id": "menuNav",
        "label": "Enter The Menu Links"
      },
      {
        "type": "header",
        "content": "Page Styling Settings"
      },
      {
        "type": "color",
        "id": "bg-color",
        "label": "Back Ground Color"
      },
      {
        "type": "header",
        "content": "Calculator Settings"
      },
      {
        "type": "text",
        "id": "Calculator-title",
        "label": "Add Calculator Heading"
      },
      {
        "type": "range",
        "id": "font_size",
        "min": 12,
        "max": 24,
        "step": 1,
        "unit": "px",
        "label": "Font size",
        "default": 16
      },
      {
        "type": "color",
        "id": "calc-bg-color",
        "label": "Calculator Background Color"
      },
      {
        "type": "range",
        "id": "bg_blur",
        "min": 1,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Blur Effect",
        "default": 5
      },
      {
        "type": "range",
        "id": "bg_opacity",
        "min": 1,
        "max": 99,
        "step": 1,
        "unit": "%",
        "label": "Color Opacity",
        "default": 50
      }
    ],
    "presets": [
      {
        "name": "kiloWatt-converter"
      }
    ]
  }
{% endschema %}